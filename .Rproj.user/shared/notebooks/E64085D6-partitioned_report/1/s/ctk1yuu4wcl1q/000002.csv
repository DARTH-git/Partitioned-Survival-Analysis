"0","# generate correlated values from a mutlivariate normal distribution for PFS and OS."
"0","psa.pfs <- normboot.flexsurvreg(x = best.pfs,n.psa)"
"0","psa.os  <- normboot.flexsurvreg(x = best.os,n.psa)"
"0",""
"0","# vectors to store the total costs and total utilities from each simulation"
"0","TC <- TE <- c()"
"0",""
"0","for (i in 1:n.psa) {"
"0","  # at each simulation, draw a sample of the parameters (shape and scale) from the best-fitting survivor distribution for PSA and OS"
"0","  pfs.surv <- best.pfs$dfns$p(times, psa.pfs[i,1], psa.pfs[i,2], lower.tail = F)"
"0","  os.surv  <- best.pfs$dfns$p(times, psa.os[i,1],   psa.os[i,2], lower.tail = F)"
"0","  "
"0","  prog            <- os.surv - pfs.surv          # estimate the probability of remaining in the progressed state"
"0","  prog[prog < 0]  <- 0                           # in cases where the probability is negative replace with zero"
"0","  s               <- pfs.surv                    # probability of remaining stable"
"0","  d               <- 1 - os.surv                 # probability of being dead"
"0","  "
"0","  M.tr <- as.matrix(data.frame(S = s, P = prog, D = d))"
"0","  "
"0","  # Compute Cost-Effectiveness Outcomes"
"0","  # Mean Costs and QALYs per cycle"
"0","  v.tc <- M.tr %*% c(c.S, c.P, c.D)  # calculate expected costs by multiplying m.M with the cost vector for the different health states   "
"0","  v.tu <- M.tr %*% c(u.S, u.P, u.D)  # calculate expected QALYs by multiplying m.M with the utilities for the different health states  "
"0","  "
"0","  # Discounted Mean Costs and QALYs"
"0","  v.tc.d <-  t(v.tc) %*% v.dwc   # Discount costs  by multiplying the cost vector with discount weights (v.dwc) "
"0","  v.te.d <-  t(v.tu) %*% v.dwe * c.l   # Discount QALYS  by multiplying the QALYs vector with discount weights (v.dwe)"
"0","  "
"0","  TC <- c(TC, v.tc.d)"
"0","  TE <- c(TE, v.te.d)"
"0","}"
"0",""
